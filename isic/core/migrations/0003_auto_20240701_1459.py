# Generated by Django 4.2.13 on 2024-07-01 14:59

import time

from django.conf import settings
from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps
import requests

from isic.core.search import IMAGE_INDEX_MAPPINGS, LESION_INDEX_MAPPINGS, maybe_create_index


def _block_until_elasticsearch_is_available():
    time_slept = 0

    while True:
        try:
            requests.get(f"{settings.ELASTICSEARCH_URL}/_cluster/health", timeout=1)
        except requests.exceptions.ConnectionError:
            time.sleep(1)
            time_slept += 1

            if time_slept > 30:
                raise TimeoutError("Elasticsearch did not become available in time")  # noqa: B904
        else:
            break


def create_elasticsearch_index(apps, schema_editor):
    _block_until_elasticsearch_is_available()
    maybe_create_index(settings.ISIC_ELASTICSEARCH_IMAGES_INDEX, IMAGE_INDEX_MAPPINGS)
    maybe_create_index(settings.ISIC_ELASTICSEARCH_LESIONS_INDEX, LESION_INDEX_MAPPINGS)


def update_default_site(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor):
    Site = apps.get_model("sites", "Site")

    # A default site object may or may not exist.
    # If this is a brand-new database, the post_migrate will not fire until the very end of the
    # "migrate" command, so the sites app will not have created a default site object yet.
    # If this is an existing database, the sites app will likely have created an default site
    # object already.
    Site.objects.update_or_create(
        pk=settings.SITE_ID, defaults={"domain": "api.isic-archive.com", "name": "ISIC Archive"}
    )


def setup_groups(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    User = apps.get_model("auth", "User")

    for group_name in ["Public", "ISIC Staff"]:
        Group.objects.get_or_create(name=group_name)

    public = Group.objects.get(name="Public")
    public.user_set.set(User.objects.all())


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0002_initial"),
        ("sites", "0002_alter_domain_unique"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.RunPython(update_default_site, elidable=False),
        migrations.RunPython(setup_groups, elidable=False),
        migrations.RunPython(create_elasticsearch_index, elidable=False),
    ]
