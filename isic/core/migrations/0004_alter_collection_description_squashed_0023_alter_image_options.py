# Generated by Django 5.1.9 on 2025-06-04 15:06

from django.db import migrations, models
import django.db.models.deletion
import s3_file_field.fields

import isic.core.models.doi


class Migration(migrations.Migration):
    replaces = [
        ("core", "0004_alter_collection_description"),
        ("core", "0005_doi_bundle"),
        ("core", "0006_doi_slug"),
        ("core", "0007_alter_doi_slug"),
        ("core", "0008_doi_bundle_size"),
        ("core", "0009_alter_doi_bundle_size"),
        ("core", "0010_doi_citations"),
        ("core", "0011_doi_metadata_doi_metadata_size"),
        ("core", "0012_alter_doi_options"),
        ("core", "0013_alter_doi_bundle_alter_doi_metadata_supplementalfile"),
        ("core", "0014_alter_doi_bundle_alter_doi_metadata"),
        ("core", "0015_doi_schema_org_dataset"),
        ("core", "0016_rename_file_supplementalfile_blob"),
        ("core", "0019_remove_collection_new_images_alter_collection_images"),
        ("core", "0020_alter_supplementalfile_options_and_more"),
        ("core", "0021_materialized_view_collection_counts"),
        ("core", "0022_collectioncount"),
        ("core", "0023_alter_image_options"),
    ]

    dependencies = [
        ("core", "0003_auto_20240701_1459"),
    ]

    operations = [
        migrations.AlterField(
            model_name="collection",
            name="description",
            field=models.TextField(
                blank=True,
                help_text='Supports <a href="https://www.markdownguide.org/cheat-sheet/">markdown</a>.',
            ),
        ),
        migrations.AddField(
            model_name="doi",
            name="slug",
            field=models.SlugField(max_length=150, unique=True),
        ),
        migrations.AddField(
            model_name="doi",
            name="bundle",
            field=models.FileField(blank=True, null=True, upload_to="doi-bundles/"),
        ),
        migrations.AddField(
            model_name="doi",
            name="bundle_size",
            field=models.PositiveBigIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="doi",
            name="citations",
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name="doi",
            name="metadata",
            field=models.FileField(blank=True, null=True, upload_to="doi-bundles/"),
        ),
        migrations.AddField(
            model_name="doi",
            name="metadata_size",
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AlterModelOptions(
            name="doi",
            options={"verbose_name": "DOI", "verbose_name_plural": "DOIs"},
        ),
        migrations.AlterField(
            model_name="doi",
            name="bundle",
            field=models.FileField(
                blank=True,
                null=True,
                storage=isic.core.models.doi.doi_storage,
                upload_to=isic.core.models.doi.doi_upload_to,
            ),
        ),
        migrations.AlterField(
            model_name="doi",
            name="metadata",
            field=models.FileField(
                blank=True,
                null=True,
                storage=isic.core.models.doi.doi_storage,
                upload_to=isic.core.models.doi.doi_upload_to,
            ),
        ),
        migrations.AddField(
            model_name="doi",
            name="schema_org_dataset",
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.CreateModel(
            name="SupplementalFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("blob", s3_file_field.fields.S3FileField()),
                ("description", models.CharField(max_length=255)),
                ("filename", models.CharField(max_length=255)),
                ("size", models.PositiveBigIntegerField(default=0)),
                (
                    "doi",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="supplemental_files",
                        to="core.doi",
                    ),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql="ALTER TABLE core_collection_images RENAME TO core_collectionimage",
                    reverse_sql="ALTER TABLE core_collectionimage RENAME TO core_collection_images",
                    elidable=True,
                ),
            ],
            state_operations=[
                migrations.CreateModel(
                    name="CollectionImage",
                    fields=[
                        (
                            "id",
                            models.BigAutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("created", models.DateTimeField(auto_now_add=True)),
                        (
                            "collection",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE, to="core.collection"
                            ),
                        ),
                        (
                            "image",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE, to="core.image"
                            ),
                        ),
                    ],
                    options={
                        "constraints": [
                            models.UniqueConstraint(
                                fields=("collection", "image"),
                                name="collectionimage_collection_image_unique",
                            )
                        ],
                    },
                ),
                migrations.AlterField(
                    model_name="collection",
                    name="images",
                    field=models.ManyToManyField(
                        related_name="collections", through="core.CollectionImage", to="core.image"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="collectionimage",
            name="created",
            field=models.DateTimeField(auto_now_add=True, db_index=True),
        ),
        migrations.AlterModelOptions(
            name="supplementalfile",
            options={"ordering": ["order"]},
        ),
        migrations.AddField(
            model_name="supplementalfile",
            name="order",
            field=models.PositiveSmallIntegerField(default=0),
        ),
        migrations.RunSQL(
            sql="""
CREATE MATERIALIZED VIEW IF NOT EXISTS materialized_collection_counts AS
SELECT
    ci.collection_id AS id,
    COUNT(DISTINCT ingest_accession.lesion_id) AS lesion_count,
    COUNT(DISTINCT ingest_accession.patient_id) AS patient_count,
    COUNT(ci.image_id) AS image_count
FROM core_collectionimage AS ci
INNER JOIN core_image ON ci.image_id = core_image.id
INNER JOIN ingest_accession ON core_image.accession_id = ingest_accession.id
GROUP BY 1;

-- a unique index is necessary to be able to refresh the materialized view concurrently
CREATE UNIQUE INDEX IF NOT EXISTS materialized_collection_counts_id_idx ON
materialized_collection_counts (id);
            """,
            elidable=False,
        ),
        migrations.CreateModel(
            name="CollectionCount",
            fields=[
                (
                    "id",
                    models.OneToOneField(
                        db_column="id",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        related_name="cached_counts",
                        serialize=False,
                        to="core.collection",
                    ),
                ),
                ("lesion_count", models.PositiveIntegerField()),
                ("patient_count", models.PositiveIntegerField()),
                ("image_count", models.PositiveIntegerField()),
            ],
            options={
                "db_table": "materialized_collection_counts",
                "managed": False,
            },
        ),
        migrations.AlterModelOptions(
            name="image",
            options={"get_latest_by": "created", "ordering": ["created"]},
        ),
    ]
