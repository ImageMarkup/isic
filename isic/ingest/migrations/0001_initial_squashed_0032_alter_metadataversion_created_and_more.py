# Generated by Django 5.1.9 on 2025-06-04 15:14

from django.conf import settings
import django.contrib.postgres.constraints
import django.contrib.postgres.indexes
import django.contrib.postgres.operations
import django.core.validators
from django.db import migrations, models
import django.db.models.constraints
import django.db.models.deletion
import django.db.models.expressions
import django.db.models.functions.comparison
import django.db.models.functions.math
import django.utils.timezone
import django_extensions.db.fields
import isic_metadata.diagnosis_hierarchical
import isic_metadata.fields
import s3_file_field.fields

import isic.ingest.models.accession
import isic.ingest.models.lesion
import isic.ingest.models.patient
import isic.ingest.models.rcm_case
import isic.ingest.utils.json


class Migration(migrations.Migration):
    replaces = [
        ("ingest", "0001_initial"),
        ("ingest", "0002_accession_is_cog"),
        ("ingest", "0003_accession_accession_is_cog_mosaic"),
        ("ingest", "0004_remove_accession_accession_is_cog_mosaic_and_more"),
        ("ingest", "0005_accession_legacy_dx"),
        ("ingest", "0006_accession_valid_diagnosis_accession_valid_legacy_dx"),
        ("ingest", "0007_accession_ingest_acce_fitzpat_15c454_idx_and_more"),
        ("ingest", "0008_accession_accession_rounded_age"),
        ("ingest", "0009_accession_accession_diagnosis_gin"),
        ("ingest", "0010_accession_diagnosis_1_accession_diagnosis_2_and_more"),
        ("ingest", "0011_remove_accession_valid_diagnosis_and_more"),
        ("ingest", "0012_accession_accession_diagnosis_1_and_more"),
        ("ingest", "0013_accession_anatom_site_special"),
        ("ingest", "0014_alter_cohort_description"),
        ("ingest", "0015_bulkmetadataapplication"),
        ("ingest", "0016_remove_accession_accession_lesion_id_patient_id_exclusion_and_more"),
        ("ingest", "0017_alter_bulkmetadataapplication_metadata_file"),
        ("ingest", "0018_rename_attribution_cohort_default_attribution"),
        ("ingest", "0019_accession_attribution"),
        ("ingest", "0020_remove_accession_valid_legacy_dx_and_more"),
        ("ingest", "0021_accession_image_manipulation"),
        ("ingest", "0022_accession_ingest_acce_image_m_aee960_idx"),
        ("ingest", "0023_remove_accession_accession_unique_blob_name_and_more"),
        ("ingest", "0024_metadatafile_blob_not_empty"),
        ("ingest", "0025_alter_accession_attribution"),
        ("ingest", "0026_publishrequest_publishrequestaccession_and_more"),
        ("ingest", "0027_remove_accession_accession_succeeded_blob_fields_and_more"),
        ("ingest", "0028_remove_accession_ingest_acce_mel_cla_716507_idx_and_more"),
        ("ingest", "0029_remove_accession_ingest_acce_mel_typ_5d54e1_idx_and_more"),
        ("ingest", "0030_remove_accession_ingest_acce_nevus_t_8c8b30_idx_and_more"),
        ("ingest", "0031_remove_accession_accession_benign_malignant_and_more"),
        ("ingest", "0032_alter_metadataversion_created_and_more"),
    ]

    dependencies = [
        ("core", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        django.contrib.postgres.operations.BtreeGistExtension(),
        migrations.CreateModel(
            name="Accession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, db_index=True
                    ),
                ),
                ("concomitant_biopsy", models.BooleanField(blank=True, null=True)),
                ("fitzpatrick_skin_type", models.CharField(blank=True, max_length=255, null=True)),
                ("age", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("sex", models.CharField(blank=True, max_length=6, null=True)),
                ("anatom_site_general", models.CharField(blank=True, max_length=255, null=True)),
                ("benign_malignant", models.CharField(blank=True, max_length=255, null=True)),
                ("diagnosis", models.CharField(blank=True, max_length=255, null=True)),
                ("diagnosis_confirm_type", models.CharField(blank=True, max_length=255, null=True)),
                ("personal_hx_mm", models.BooleanField(blank=True, null=True)),
                ("family_hx_mm", models.BooleanField(blank=True, null=True)),
                (
                    "clin_size_long_diam_mm",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True),
                ),
                ("melanocytic", models.BooleanField(blank=True, null=True)),
                ("mel_class", models.CharField(blank=True, max_length=255, null=True)),
                ("mel_mitotic_index", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "mel_thick_mm",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True),
                ),
                ("mel_type", models.CharField(blank=True, max_length=255, null=True)),
                ("mel_ulcer", models.BooleanField(blank=True, null=True)),
                ("acquisition_day", models.IntegerField(blank=True, null=True)),
                ("nevus_type", models.CharField(blank=True, max_length=255, null=True)),
                ("image_type", models.CharField(blank=True, max_length=255, null=True)),
                ("dermoscopic_type", models.CharField(blank=True, max_length=255, null=True)),
                ("tbp_tile_type", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "girder_id",
                    models.CharField(
                        blank=True, help_text="The image_id from Girder.", max_length=24
                    ),
                ),
                (
                    "copyright_license",
                    models.CharField(
                        choices=[("CC-0", "CC-0"), ("CC-BY", "CC-BY"), ("CC-BY-NC", "CC-BY-NC")],
                        max_length=255,
                    ),
                ),
                ("original_blob", s3_file_field.fields.S3FileField(unique=True)),
                ("original_blob_name", models.CharField(editable=False, max_length=255)),
                ("original_blob_size", models.PositiveBigIntegerField(editable=False)),
                ("blob", s3_file_field.fields.S3FileField(blank=True)),
                ("blob_name", models.CharField(blank=True, editable=False, max_length=255)),
                (
                    "blob_size",
                    models.PositiveBigIntegerField(
                        blank=True, default=None, editable=False, null=True
                    ),
                ),
                ("width", models.PositiveIntegerField(blank=True, null=True)),
                ("height", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("creating", "Creating"),
                            ("created", "Created"),
                            ("skipped", "Skipped"),
                            ("failed", "Failed"),
                            ("succeeded", "Succeeded"),
                        ],
                        default="creating",
                        max_length=20,
                    ),
                ),
                ("thumbnail_256", s3_file_field.fields.S3FileField(blank=True)),
                (
                    "thumbnail_256_size",
                    models.PositiveIntegerField(
                        blank=True, default=None, editable=False, null=True
                    ),
                ),
            ],
            options={
                "ordering": ["-created"],
                "get_latest_by": "created",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Cohort",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, db_index=True
                    ),
                ),
                (
                    "girder_id",
                    models.CharField(
                        blank=True, help_text="The dataset_id from Girder.", max_length=24
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of your Cohort. <strong>This is private</strong>, and will not be published along with your images.",  # noqa: E501
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="The description of your Cohort.<strong>This is private</strong>, and will not be published along with your images."  # noqa: E501
                    ),
                ),
                (
                    "default_copyright_license",
                    models.CharField(
                        choices=[("CC-0", "CC-0"), ("CC-BY", "CC-BY"), ("CC-BY-NC", "CC-BY-NC")],
                        max_length=255,
                    ),
                ),
                (
                    "attribution",
                    models.CharField(
                        help_text="The institution name that should be attributed.", max_length=200
                    ),
                ),
                (
                    "collection",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cohort",
                        to="core.collection",
                    ),
                ),
            ],
            options={
                "ordering": ["-created"],
                "get_latest_by": "created",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ZipUpload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, db_index=True
                    ),
                ),
                (
                    "blob",
                    s3_file_field.fields.S3FileField(
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["zip"]
                            )
                        ]
                    ),
                ),
                ("blob_name", models.CharField(editable=False, max_length=255)),
                ("blob_size", models.PositiveBigIntegerField(editable=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("created", "Created"),
                            ("extracting", "Extracting"),
                            ("extracted", "Extracted"),
                            ("failed", "Failed"),
                        ],
                        default="created",
                        max_length=20,
                    ),
                ),
                (
                    "fail_reason",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("duplicates", "Duplicates"),
                            ("invalid", "Invalid"),
                            ("other", "Other"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "cohort",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="zip_uploads",
                        to="ingest.cohort",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "ordering": ["-created"],
                "get_latest_by": "created",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UnstructuredMetadata",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("value", models.JSONField(blank=True, default=dict)),
                (
                    "accession",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="unstructured_metadata",
                        to="ingest.accession",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RcmCase",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=isic.ingest.models.rcm_case._default_id,  # noqa: SLF001
                        max_length=7,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("private_rcm_case_id", models.CharField(max_length=255)),
                (
                    "cohort",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rcm_cases",
                        to="ingest.cohort",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Patient",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=isic.ingest.models.patient._default_id,  # noqa: SLF001
                        max_length=10,
                        primary_key=True,
                        serialize=False,
                        validators=[django.core.validators.RegexValidator("^IP_[0-9]{7}$")],
                    ),
                ),
                ("private_patient_id", models.CharField(max_length=255)),
                (
                    "cohort",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="patients",
                        to="ingest.cohort",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MetadataVersion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, db_index=True
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(encoder=isic.ingest.utils.json.DecimalAwareJSONEncoder),
                ),
                ("unstructured_metadata", models.JSONField()),
                ("lesion", models.JSONField(default=dict)),
                ("patient", models.JSONField(default=dict)),
                ("rcm_case", models.JSONField(default=dict)),
                (
                    "accession",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="metadata_versions",
                        to="ingest.accession",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="metadata_versions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created"],
                "get_latest_by": "created",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MetadataFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, db_index=True
                    ),
                ),
                (
                    "blob",
                    s3_file_field.fields.S3FileField(
                        unique=True,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["csv"]
                            )
                        ],
                    ),
                ),
                ("blob_name", models.CharField(editable=False, max_length=255)),
                ("blob_size", models.PositiveBigIntegerField(editable=False)),
                ("validation_errors", models.TextField(blank=True)),
                ("validation_completed", models.BooleanField(default=False)),
                (
                    "cohort",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metadata_files",
                        to="ingest.cohort",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "ordering": ["-created"],
                "get_latest_by": "created",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Lesion",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=isic.ingest.models.lesion._default_id,  # noqa: SLF001
                        max_length=12,
                        primary_key=True,
                        serialize=False,
                        validators=[django.core.validators.RegexValidator("^IL_[0-9]{7}$")],
                    ),
                ),
                ("private_lesion_id", models.CharField(max_length=255)),
                (
                    "cohort",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesions",
                        to="ingest.cohort",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DistinctnessMeasure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "checksum",
                    models.CharField(
                        blank=True,
                        editable=False,
                        max_length=64,
                        null=True,
                        validators=[django.core.validators.RegexValidator("^[0-9a-f]{64}$")],
                    ),
                ),
                (
                    "accession",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="ingest.accession"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Contributor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, db_index=True
                    ),
                ),
                (
                    "institution_name",
                    models.CharField(
                        help_text="The full name of your affiliated institution. <strong>This is private</strong>, and will not be published along with your images.",  # noqa: E501
                        max_length=255,
                        verbose_name="Institution Name",
                    ),
                ),
                (
                    "institution_url",
                    models.URLField(
                        blank=True,
                        help_text="The URL of your affiliated institution. <strong>This is private</strong>, and will not be published along with your images.",  # noqa: E501
                        verbose_name="Institution URL",
                    ),
                ),
                (
                    "legal_contact_info",
                    models.TextField(
                        help_text="The person or institution responsible for legal inquiries about your data. <strong> This is private</strong>, and will not be published along with your images.",  # noqa: E501
                        verbose_name="Legal Contact Information",
                    ),
                ),
                (
                    "default_copyright_license",
                    models.CharField(
                        blank=True,
                        choices=[("CC-0", "CC-0"), ("CC-BY", "CC-BY"), ("CC-BY-NC", "CC-BY-NC")],
                        max_length=255,
                        verbose_name="Default Copyright License",
                    ),
                ),
                (
                    "default_attribution",
                    models.CharField(
                        blank=True,
                        help_text="Text which must be reproduced by users of your images, to comply with Creative Commons Attribution requirements.",  # noqa: E501
                        max_length=255,
                        verbose_name="Default Attribution",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_contributors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owners",
                    models.ManyToManyField(
                        related_name="owned_contributors", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "ordering": ["-created"],
                "get_latest_by": "created",
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="cohort",
            name="contributor",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="cohorts",
                to="ingest.contributor",
            ),
        ),
        migrations.AddField(
            model_name="cohort",
            name="creator",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="AccessionReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("reviewed_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("value", models.BooleanField()),
                (
                    "accession",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review",
                        to="ingest.accession",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "ordering": ["-reviewed_at"],
                "get_latest_by": "reviewed_at",
            },
        ),
        migrations.AddField(
            model_name="accession",
            name="cohort",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="accessions",
                to="ingest.cohort",
            ),
        ),
        migrations.AddField(
            model_name="accession",
            name="creator",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="accessions",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="accession",
            name="lesion",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="accessions",
                to="ingest.lesion",
            ),
        ),
        migrations.AddField(
            model_name="accession",
            name="patient",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="accessions",
                to="ingest.patient",
            ),
        ),
        migrations.AddField(
            model_name="accession",
            name="rcm_case",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="accessions",
                to="ingest.rcmcase",
            ),
        ),
        migrations.AddField(
            model_name="accession",
            name="zip_upload",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="accessions",
                to="ingest.zipupload",
            ),
        ),
        migrations.AddConstraint(
            model_name="zipupload",
            constraint=models.UniqueConstraint(
                condition=models.Q(("blob", ""), _negated=True),
                fields=("blob",),
                name="zipupload_unique_blob",
            ),
        ),
        migrations.AddConstraint(
            model_name="zipupload",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("status", "failed"), models.Q(("fail_reason", ""), _negated=True)),
                    models.Q(("status", "failed"), _negated=True),
                    _connector="OR",
                ),
                name="zipupload_fail_reason_requires_failed_status",
            ),
        ),
        migrations.AddConstraint(
            model_name="rcmcase",
            constraint=models.UniqueConstraint(
                fields=("private_rcm_case_id", "cohort"), name="unique_rcm_case"
            ),
        ),
        migrations.AddConstraint(
            model_name="patient",
            constraint=models.UniqueConstraint(
                fields=("private_patient_id", "cohort"), name="unique_patient"
            ),
        ),
        migrations.AddConstraint(
            model_name="patient",
            constraint=models.CheckConstraint(
                condition=models.Q(("id__regex", "^IP_[0-9]{7}$")), name="patient_id_valid_format"
            ),
        ),
        migrations.AddConstraint(
            model_name="lesion",
            constraint=models.UniqueConstraint(
                fields=("private_lesion_id", "cohort"), name="unique_lesion"
            ),
        ),
        migrations.AddConstraint(
            model_name="lesion",
            constraint=models.CheckConstraint(
                condition=models.Q(("id__regex", "^IL_[0-9]{7}$")), name="lesion_id_valid_format"
            ),
        ),
        migrations.AddIndex(
            model_name="distinctnessmeasure",
            index=models.Index(fields=["checksum"], name="ingest_dist_checksu_cde183_idx"),
        ),
        migrations.AddConstraint(
            model_name="cohort",
            constraint=models.UniqueConstraint(
                condition=models.Q(("girder_id", ""), _negated=True),
                fields=("girder_id",),
                name="cohort_unique_girder_id",
            ),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(
                fields=["lesion_id", "id", "cohort_id"], name="ingest_acce_lesion__f2701b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(
                fields=["cohort_id", "status", "created"], name="ingest_acce_cohort__e73c08_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(
                fields=["original_blob_name"], name="ingest_acce_origina_23620f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(fields=["girder_id"], name="ingest_acce_girder__d68973_idx"),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.UniqueConstraint(
                condition=models.Q(("girder_id", ""), _negated=True),
                fields=("girder_id",),
                name="accession_unique_girder_id",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.UniqueConstraint(
                condition=models.Q(("blob", ""), _negated=True),
                fields=("blob",),
                name="accession_unique_blob",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.UniqueConstraint(
                condition=models.Q(("blob_name", ""), _negated=True),
                fields=("blob_name",),
                name="accession_unique_blob_name",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.CheckConstraint(
                condition=models.Q(("original_blob_name", models.F("blob_name")), _negated=True),
                name="accession_blob_name_not_original_blob_name",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("blob_size__isnull", False),
                        ("height__isnull", False),
                        ("status", "succeeded"),
                        ("thumbnail_256_size__isnull", False),
                        ("width__isnull", False),
                        models.Q(("thumbnail_256", ""), _negated=True),
                        models.Q(("blob_name", ""), _negated=True),
                    ),
                    models.Q(("status", "succeeded"), _negated=True),
                    _connector="OR",
                ),
                name="accession_succeeded_blob_fields",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("concomitant_biopsy", True), ("diagnosis_confirm_type", "histopathology")
                    ),
                    models.Q(("concomitant_biopsy", True), _negated=True),
                    _connector="OR",
                ),
                name="accession_concomitant_biopsy_diagnosis_confirm_type",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                condition=models.Q(("lesion_id__isnull", False), ("patient_id__isnull", False)),
                expressions=[("lesion_id", "="), ("patient_id", "<>")],
                name="accession_lesion_id_patient_id_exclusion",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                condition=models.Q(("rcm_case_id__isnull", False), ("lesion_id__isnull", False)),
                expressions=[("rcm_case_id", "="), ("lesion_id", "<>")],
                name="accession_rcm_case_id_lesion_id_exclusion",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("image_type", isic_metadata.fields.ImageTypeEnum["rcm_macroscopic"])
                ),
                fields=("cohort_id", "rcm_case_id"),
                name="accession_unique_rcm_case_id_macroscopic_image",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="accession",
            unique_together={("cohort", "original_blob_name")},
        ),
        migrations.AddField(
            model_name="accession",
            name="is_cog",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("is_cog", False),
                    ("image_type__isnull", True),
                    ("image_type", isic_metadata.fields.ImageTypeEnum["rcm_mosaic"]),
                    _connector="OR",
                ),
                name="accession_is_cog_mosaic",
            ),
        ),
        migrations.AddField(
            model_name="accession",
            name="legacy_dx",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("diagnosis__in", isic_metadata.diagnosis_hierarchical.DiagnosisEnum)
                ),
                name="valid_diagnosis",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.CheckConstraint(
                condition=models.Q(("legacy_dx__in", isic_metadata.fields.LegacyDxEnum)),
                name="valid_legacy_dx",
            ),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(
                fields=["fitzpatrick_skin_type"], name="ingest_acce_fitzpat_15c454_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(
                condition=models.Q(
                    ("anatom_site_general__in", ["palms/soles", "lateral torso", "oral/genital"])
                ),
                fields=["anatom_site_general"],
                name="accession_anatom_site_general",
            ),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(
                condition=models.Q(("benign_malignant", "benign"), _negated=True),
                fields=["benign_malignant"],
                name="accession_benign_malignant",
            ),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(
                condition=models.Q(("diagnosis__in", [None, "", "Benign"]), _negated=True),
                fields=["diagnosis"],
                name="accession_diagnosis",
            ),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(fields=["legacy_dx"], name="ingest_acce_legacy__33310d_idx"),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(fields=["mel_class"], name="ingest_acce_mel_cla_716507_idx"),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(fields=["mel_mitotic_index"], name="ingest_acce_mel_mit_261415_idx"),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(fields=["mel_type"], name="ingest_acce_mel_typ_5d54e1_idx"),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(fields=["mel_ulcer"], name="ingest_acce_mel_ulc_d11b54_idx"),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(fields=["nevus_type"], name="ingest_acce_nevus_t_8c8b30_idx"),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(
                condition=models.Q(
                    ("image_type__in", ["TBP tile: close-up", "dermoscopic"]), _negated=True
                ),
                fields=["image_type"],
                name="accession_image_type",
            ),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(
                django.db.models.functions.comparison.Cast(
                    django.db.models.expressions.CombinedExpression(
                        django.db.models.functions.math.Round(
                            django.db.models.expressions.CombinedExpression(
                                django.db.models.functions.comparison.Cast(
                                    "age", output_field=models.FloatField()
                                ),
                                "/",
                                models.Value(5.0),
                            )
                        ),
                        "*",
                        models.Value(5),
                    ),
                    output_field=models.IntegerField(),
                ),
                name="accession_rounded_age",
            ),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass("diagnosis", name="gin_trgm_ops"),
                name="accession_diagnosis_gin",
            ),
        ),
        migrations.AddField(
            model_name="accession",
            name="diagnosis_2",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="accession",
            name="diagnosis_3",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="accession",
            name="diagnosis_4",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="accession",
            name="diagnosis_5",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="accession",
            name="diagnosis_1",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.RemoveConstraint(
            model_name="accession",
            name="valid_diagnosis",
        ),
        migrations.RemoveIndex(
            model_name="accession",
            name="accession_diagnosis",
        ),
        migrations.RemoveIndex(
            model_name="accession",
            name="accession_diagnosis_gin",
        ),
        migrations.RemoveField(
            model_name="accession",
            name="diagnosis",
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(
                condition=models.Q(("diagnosis_1", "Benign"), _negated=True),
                fields=["diagnosis_1"],
                name="accession_diagnosis_1",
            ),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(fields=["diagnosis_2"], name="accession_diagnosis_2"),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(fields=["diagnosis_3"], name="accession_diagnosis_3"),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(fields=["diagnosis_4"], name="accession_diagnosis_4"),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(fields=["diagnosis_5"], name="accession_diagnosis_5"),
        ),
        migrations.AddField(
            model_name="accession",
            name="anatom_site_special",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name="cohort",
            name="description",
            field=models.TextField(
                help_text='The description of your Cohort.<strong>This is private</strong>, and will not be published along with your images.<br />Supports <a href="https://www.markdownguide.org/cheat-sheet/">markdown</a>.'  # noqa: E501
            ),
        ),
        migrations.CreateModel(
            name="BulkMetadataApplication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("message", models.TextField(blank=True)),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "metadata_file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="metadata_applications",
                        to="ingest.metadatafile",
                    ),
                ),
            ],
        ),
        migrations.RemoveConstraint(
            model_name="accession",
            name="accession_lesion_id_patient_id_exclusion",
        ),
        migrations.RemoveConstraint(
            model_name="accession",
            name="accession_rcm_case_id_lesion_id_exclusion",
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                condition=models.Q(("lesion_id__isnull", False), ("patient_id__isnull", False)),
                deferrable=django.db.models.constraints.Deferrable["IMMEDIATE"],
                expressions=[("lesion_id", "="), ("patient_id", "<>")],
                name="accession_lesion_id_patient_id_exclusion",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                condition=models.Q(("rcm_case_id__isnull", False), ("lesion_id__isnull", False)),
                deferrable=django.db.models.constraints.Deferrable["IMMEDIATE"],
                expressions=[("rcm_case_id", "="), ("lesion_id", "<>")],
                name="accession_rcm_case_id_lesion_id_exclusion",
            ),
        ),
        migrations.RenameField(
            model_name="cohort",
            old_name="attribution",
            new_name="default_attribution",
        ),
        migrations.AlterField(
            model_name="bulkmetadataapplication",
            name="metadata_file",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="metadata_applications",
                to="ingest.metadatafile",
            ),
        ),
        migrations.AddField(
            model_name="accession",
            name="attribution",
            field=models.CharField(max_length=200),
        ),
        migrations.RemoveConstraint(
            model_name="accession",
            name="valid_legacy_dx",
        ),
        migrations.RemoveIndex(
            model_name="accession",
            name="ingest_acce_legacy__33310d_idx",
        ),
        migrations.RemoveField(
            model_name="accession",
            name="legacy_dx",
        ),
        migrations.AddField(
            model_name="accession",
            name="image_manipulation",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddIndex(
            model_name="accession",
            index=models.Index(
                fields=["image_manipulation"], name="ingest_acce_image_m_aee960_idx"
            ),
        ),
        migrations.RemoveConstraint(
            model_name="accession",
            name="accession_unique_blob_name",
        ),
        migrations.RemoveConstraint(
            model_name="accession",
            name="accession_blob_name_not_original_blob_name",
        ),
        migrations.RemoveConstraint(
            model_name="accession",
            name="accession_succeeded_blob_fields",
        ),
        migrations.RemoveField(
            model_name="accession",
            name="blob_name",
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("blob_size__isnull", False),
                        ("height__isnull", False),
                        ("status", "succeeded"),
                        ("thumbnail_256_size__isnull", False),
                        ("width__isnull", False),
                        models.Q(("thumbnail_256", ""), _negated=True),
                    ),
                    models.Q(("status", "succeeded"), _negated=True),
                    _connector="OR",
                ),
                name="accession_succeeded_blob_fields",
            ),
        ),
        migrations.AddConstraint(
            model_name="metadatafile",
            constraint=models.CheckConstraint(
                condition=models.Q(("blob", ""), _negated=True), name="blob_not_empty"
            ),
        ),
        migrations.AlterField(
            model_name="accession",
            name="attribution",
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.CreateModel(
            name="PublishRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("public", models.BooleanField(default=False)),
                ("collections", models.ManyToManyField(to="core.collection")),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PublishRequestAccession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "accession",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT, to="ingest.accession"
                    ),
                ),
                (
                    "publish_request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="ingest.publishrequest"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="publishrequest",
            name="accessions",
            field=models.ManyToManyField(
                through="ingest.PublishRequestAccession", to="ingest.accession"
            ),
        ),
        migrations.RemoveConstraint(
            model_name="accession",
            name="accession_succeeded_blob_fields",
        ),
        migrations.AddField(
            model_name="accession",
            name="sponsored_blob",
            field=models.FileField(
                blank=True,
                storage=isic.ingest.models.accession.sponsored_blob_storage,
                upload_to="images/",
            ),
        ),
        migrations.AddField(
            model_name="accession",
            name="sponsored_thumbnail_256_blob",
            field=models.FileField(
                blank=True,
                storage=isic.ingest.models.accession.sponsored_blob_storage,
                upload_to="thumbnails/",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.UniqueConstraint(
                condition=models.Q(("sponsored_blob", ""), _negated=True),
                fields=("sponsored_blob",),
                name="accession_unique_sponsored_blob",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.UniqueConstraint(
                condition=models.Q(("sponsored_thumbnail_256_blob", ""), _negated=True),
                fields=("sponsored_thumbnail_256_blob",),
                name="accession_unique_sponsored_thumbnail_256_blob",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.CheckConstraint(
                condition=models.Q(("blob", ""), ("sponsored_blob", ""), _connector="OR"),
                name="accession_blob_or_sponsored_blob",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("sponsored_blob", ""), _negated=True),
                    ("sponsored_thumbnail_256_blob", ""),
                    _connector="OR",
                ),
                name="accession_sponsored_blob_implies_sponsored_thumbnail_256_blob",
            ),
        ),
        migrations.AddConstraint(
            model_name="accession",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("blob_size__isnull", False),
                        ("height__isnull", False),
                        ("status", "succeeded"),
                        ("thumbnail_256_size__isnull", False),
                        ("width__isnull", False),
                    ),
                    models.Q(("status", "succeeded"), _negated=True),
                    _connector="OR",
                ),
                name="accession_succeeded_blob_fields",
            ),
        ),
        migrations.RemoveIndex(
            model_name="accession",
            name="ingest_acce_mel_cla_716507_idx",
        ),
        migrations.RemoveField(
            model_name="accession",
            name="mel_class",
        ),
        migrations.RemoveIndex(
            model_name="accession",
            name="ingest_acce_mel_typ_5d54e1_idx",
        ),
        migrations.RemoveField(
            model_name="accession",
            name="mel_type",
        ),
        migrations.RemoveIndex(
            model_name="accession",
            name="ingest_acce_nevus_t_8c8b30_idx",
        ),
        migrations.RemoveField(
            model_name="accession",
            name="nevus_type",
        ),
        migrations.RemoveIndex(
            model_name="accession",
            name="accession_benign_malignant",
        ),
        migrations.RemoveField(
            model_name="accession",
            name="benign_malignant",
        ),
        migrations.AlterField(
            model_name="metadataversion",
            name="created",
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name="metadataversion",
            name="modified",
            field=models.DateTimeField(auto_now=True),
        ),
    ]
